---
alwaysApply: true
---
## Project: Squad Tracker

- Companion app for airsoft days with live squad tracking, scores, and simple BLE device integration.

### Codebases
- Flutter mobile app (Android, iOS) in `PROJECTS/squad-tracker-flutter`.
- PlatformIO C++ firmware for ESP32 TTGO T-Display in `Documents/PlatformIO/Projects/Bluetooth communication`.

### Flutter Project Structure
#### Repository layout (pruned)
```
/(repo root)
├─ pubspec.yaml
├─ analysis_options.yaml
├─ README.md
├─ assets/
│  └─ images/
│     ├─ markers/
│     └─ soldiers/
├─ lib/
│  ├─ main.dart
│  ├─ models/
│  ├─ providers/
│  ├─ screens/
│  ├─ utils/
│  └─ widgets/
├─ android/
│  ├─ app/
│  ├─ gradle.properties
│  └─ ...
├─ ios/
│  ├─ Runner/
│  ├─ Flutter/
│  └─ ...
├─ macos/  linux/  windows/
├─ web/
├─ supabase/
│  └─ migrations/
└─ .cursor/
   └─ rules/
```

#### Directory purposes
- **lib**: Dart source
  - `main.dart`: application entrypoint and app-wide initialization
  - `models/`: domain models and data types
  - `providers/`: app state and services (e.g., `user_squad_location_service.dart`)
  - `screens/`: top-level UI screens/views
  - `widgets/`: reusable UI components (e.g., `squad_members_list.dart`, `user_session_row.dart`, `navigation.dart`)
  - `utils/`: shared helpers and utilities
- **assets/images**: static images (markers, soldiers, etc.) declared in `pubspec.yaml`
- **android**: native Android project; includes Mapbox token in `gradle.properties`
- **ios**: native iOS project; configuration via `Runner.xcconfig`
- **macos/linux/windows**: desktop platform shells
- **web**: Flutter web entry (`index.html`) and PWA manifest
- **supabase/migrations**: SQL migrations and database DDL

Notes:
- Generated/build artifacts (e.g., `build/`) and development dependencies (e.g., `node_modules/`) are excluded from the structure above.

### BLE Device (TTGO T-Display, ESP32)
- Connection: One user ↔ one device (optional). When a user connects to a device, the app stores the device ID to auto-connect on app start.
- Buttons (confirmed mapping):
  - Left button (BTN_B): increment user's kill count by 1.
  - Right button (BTN_A): toggle alive/dead. When toggled to dead, increment deaths by 1.
- Display shows:
  - User's current score: kills, deaths, current status.
  - Dynamic score and status of other squad members.
- GATT profile:
  - Service UUID: `6E400001-B5A3-F393-E0A9-E50E24DCCA9E`
  - RX Characteristic (write from app → device): `6E400002-B5A3-F393-E0A9-E50E24DCCA9E`
  - TX Characteristic (notify from device → app): `6E400003-B5A3-F393-E0A9-E50E24DCCA9E`
- Protocol (newline-terminated ASCII lines):
  - Device → App (TX notifications):
    - `DEVICE_CONNECTED`, `DEVICE_DISCONNECTED`
    - `OP <opId> BTN_A` (status toggle), `OP <opId> BTN_B` (kill increment)
    - `HELP_RESP <requestId> <accept|ignored>` (help request response)
  - App → Device (RX writes):
    - Within snapshot block:
      - `RESET_MEMBERS` (begin snapshot)
      - `MY_STATUS <alive|dead|help|medic>`
      - `MY_KD <kills> <deaths>`
      - `MEM <name> <kills> <deaths>` (repeatable)
      - `SEQ <n>` (monotonic sequence)
      - `ACK <opId>` (acknowledge last processed op)
      - `EOT` (end; apply only if sequence increased)
    - Outside snapshot (help notifications):
      - `HELP_REQ <requestId> <requesterName> <help|medic> <distance> <direction> <color>` (show help alert)
      - `HELP_CANCEL <requestId>` (dismiss help alert)

### Supabase
- Auth: Magic link via Supabase and Resend.
- Status taxonomy used across UI: `Alive`, `Dead`, `Needs help`, `Needs medic`.
- Enum: `public.user_status` values: `ALIVE`, `DEAD`, `HELP`, `MEDIC` (default `ALIVE`).

#### Status Mapping (App ↔ DB ↔ Device)
- App UI strings → DB enum → Device protocol token
  - `Alive` → `ALIVE` → `alive`
  - `Dead` → `DEAD` → `dead`
  - `Needs help` → `HELP` → `help`
  - `Needs medic` → `MEDIC` → `medic`
- Casing: App uses Title Case for display, DB uses uppercase enum values, device protocol uses lowercase ASCII tokens.
- Device inputs: The device only emits button ops (`OP <id> BTN_A` to toggle alive/dead, `OP <id> BTN_B` to increment kills). It does not directly emit `help`/`medic`. Those statuses originate from the app.
- App → Device: `MY_STATUS <alive|dead|help|medic>` is always sent in lowercase within the snapshot block so the device can render status consistently.

#### Schema Details (provided DDL)
- `help_requests`
  - Columns: `id` (uuid PK), `created_at`, `game_id`, `squad_id`, `requester_id`, `status` (HELP|MEDIC), `resolved_at`, `resolved_by`, `resolution` (ignored|accepted|auto_dismissed).
  - FKs: `game_id` → `squad_games.id` (ON DELETE CASCADE), `squad_id` → `squads.id` (ON DELETE CASCADE), `requester_id` → `users.id` (ON DELETE CASCADE), `resolved_by` → `users.id`.
  - Index: `help_requests_active_idx` on `(squad_id, game_id)` WHERE `resolved_at IS NULL`.
  - Purpose: Track help/medic requests during active games with auto-creation via triggers.

- `game_events`
  - Columns: `id` (bigserial PK), `created_at`, `occurred_at`, `game_id`, `squad_id`, `user_id` nullable, `event_type` enum, `payload` jsonb.
  - Event types: `KILL`, `DEATH`, `STATUS_CHANGE`, `JOIN`, `LEAVE`, `GAME_STARTED`, `GAME_ENDED`, `HOST_TRANSFER`.
  - FKs: `game_id` → `squad_games.id` (ON DELETE CASCADE), `squad_id` → `squads.id` (ON DELETE CASCADE), `user_id` → `users.id` (ON DELETE SET NULL).
  - Indexes: `game_events_game_id_idx` on `(game_id, occurred_at)`, `game_events_squad_id_idx` on `(squad_id, occurred_at)`.
  - Purpose: Battle log and game history tracking for final reports.

- `game_rules`
  - Columns: `id` (identity PK), `created_at`, `time_before_death` default 30, `time_before_respawn` default 10, `squad_id`.
  - Constraints: `game_rules_pkey` (PK id), `game_rules_squad_id_key` (UNIQUE squad_id).
  - FKs: `squad_id` → `squads.id` (ON UPDATE CASCADE, ON DELETE CASCADE).

- `roles`
  - Columns: `id` (identity PK), `created_at`, `name`.
  - Constraints: `roles_pkey` (PK id), `roles_name_key` (UNIQUE name).

- `scoreboard_current` (VIEW)
  - Purpose: Current game scoreboard (only where `squad_games.ended_at IS NULL`).
  - Columns: `squad_id`, `game_id`, `user_id`, `username`, `kills`, `deaths`, `user_status`, `respawn_available_at`.
  - Sources: join `squad_games sg` + `user_game_stats ugs` + `users u`.

- `scoreboard_final` (VIEW)
  - Purpose: Final scoreboard for ended games (only where `squad_games.ended_at IS NOT NULL`).
  - Columns: `game_id`, `squad_id`, `user_id`, `username`, `kills`, `deaths`, `user_status`, `max_kill_streak`.
  - Sources: join `user_game_stats ugs` + `squad_games sg` + `users u`.
  - Security: `security_invoker = on` to respect underlying RLS.

- `squad_games`
  - Columns: `id` (bigserial PK), `created_at`, `started_at` default now(), `ended_at` nullable, `squad_id` (required), `host_user_id` nullable.
  - Constraints: `squad_games_pkey` (PK id), `ended_after_started` CHECK (ended_at null or >= started_at).
  - FKs: `host_user_id` → `users.id`, `squad_id` → `squads.id`.
  - Index: `one_active_game_per_squad` UNIQUE on `squad_id` WHERE `ended_at IS NULL`.
  - Triggers: Auto-log `GAME_STARTED` on INSERT, `GAME_ENDED` when `ended_at` transitions from NULL to non-NULL.

- `squads`
  - Columns: `id` (identity PK), `created_at`, `name`, `uuid` default `substring(md5(random()::text),1,6)`.
  - Constraints: `squads_pkey` (PK id), `squads_id_key` (UNIQUE id), `squads_uuid_key` (UNIQUE uuid).

- `user_game_stats`
  - Columns: `id` (bigserial PK), `game_id`, `user_id`, `kills` default 0, `deaths` default 0, `user_status` enum default `ALIVE`, `joined_at`, `last_status_change_at`, `respawn_available_at` nullable, `left_at` nullable, `max_kill_streak` default 0, `current_kill_streak` default 0.
  - Constraints: `user_game_stats_pkey` (PK id), `user_game_stats_unique` (UNIQUE game_id, user_id).
  - FKs: `game_id` → `squad_games.id` (ON DELETE CASCADE), `user_id` → `users.id`.
  - Triggers: 
    - `user_game_stats_bu_streaks` BEFORE UPDATE: auto-maintain kill streak counters (increment on kills, reset on deaths/status=DEAD).
    - `user_game_stats_au_events` AFTER UPDATE: auto-log `KILL`, `DEATH`, `STATUS_CHANGE` events to `game_events`.
    - `trg_help_requests_on_status` AFTER UPDATE OF `user_status`: auto-create `help_requests` on HELP/MEDIC status, auto-resolve on status change away from HELP/MEDIC.

- `user_squad_locations`
  - Columns: `id` (identity PK), `created_at`, `updated_at` default now(), `user_id` default `auth.uid()` (required), `squad_id` (required), `longitude`, `latitude`, `direction`.
  - Constraints: `user_squad_locations_pkey` (PK id), uniques on `(id)`, `(user_id)`, `(user_id, squad_id)`.
  - FKs: `squad_id` → `squads.id` (ON UPDATE CASCADE, ON DELETE CASCADE), `user_id` → `users.id` (ON UPDATE CASCADE, ON DELETE CASCADE).
  - Trigger: `locations_updated_at` BEFORE UPDATE executes `extensions.moddatetime('updated_at')`.

- `user_squad_sessions`
  - Columns: `id` (identity), `created_at`, `user_id` default `auth.uid()` (required), `is_host`, `squad_id` (required), `is_active` default true, `updated_at`.
  - Constraints: `squad_sessions_pkey` composite PK `(id, user_id, squad_id)`.
  - FKs: `user_id` → `users.id` (ON UPDATE CASCADE, ON DELETE CASCADE), `squad_id` → `squads.id` (ON UPDATE CASCADE, ON DELETE CASCADE).
  - Triggers:
    - `handle_updated_at` BEFORE UPDATE executes `extensions.moddatetime('updated_at')`.
    - `user_squad_sessions_trigger` AFTER INSERT/DELETE/UPDATE executes `manage_user_squad_locations()`.
    - `user_squad_sessions_biu_host` BEFORE INSERT or UPDATE OF `is_active` executes `auto_assign_host_on_insert_update()`.
    - `user_squad_sessions_aud_host` AFTER UPDATE OF `is_active`, `is_host` OR DELETE executes `reassign_host_if_needed()`.
    - `user_squad_sessions_au_join_leave` AFTER INSERT/UPDATE OF `is_active`: auto-log `JOIN`/`LEAVE` events during active games.
    - `user_squad_sessions_au_host_transfer` AFTER UPDATE OF `is_host`: auto-log `HOST_TRANSFER` events during active games.
  - Host rules:
    - Hosts must be active. On deactivation, session is automatically demoted from host.
    - When the host leaves (deactivates or session deleted), transfer host to another active member if any (oldest by `created_at`).
    - When no members remain active, no host exists (none assigned).
    - When the next user joins/reactivates and there is no host, they become host automatically.
  - Indexes/constraints:
    - Unique partial index `uq_user_squad_sessions_one_active_host_per_squad` on `(squad_id)` WHERE `is_active = true AND is_host = true`.
    - CHECK constraint `host_must_be_active`: `is_host` implies `is_active`.

- `users`
  - Columns: `id` (uuid PK), `updated_at`, `username` (CHECK length ≥ 3), `full_name`, `avatar_url`, `main_role`, `main_color`.
  - Constraints: `profiles_pkey` (PK id).
  - FKs: `id` → `auth.users(id)` (ON UPDATE CASCADE, ON DELETE SET DEFAULT), `main_role` → `roles(name)` (ON UPDATE CASCADE, ON DELETE SET NULL).

#### RLS Policies (current)
- `help_requests`
  - SELECT: role `public`; qual: requester is active member of the same squad:
    `(EXISTS (SELECT 1 FROM user_squad_sessions uss WHERE uss.squad_id = help_requests.squad_id AND uss.user_id = auth.uid() AND uss.is_active = true))`
  - INSERT: role `authenticated`; with_check: requester is active member of the same squad:
    `(EXISTS (SELECT 1 FROM user_squad_sessions uss WHERE uss.squad_id = help_requests.squad_id AND uss.user_id = auth.uid() AND uss.is_active = true))`
  - UPDATE: role `authenticated`; qual + with_check: requester is active member of the same squad:
    `(EXISTS (SELECT 1 FROM user_squad_sessions uss WHERE uss.squad_id = help_requests.squad_id AND uss.user_id = auth.uid() AND uss.is_active = true))`
- `game_events`
  - SELECT: role `public`; qual: requester is active member of the same squad:
    `(EXISTS (SELECT 1 FROM user_squad_sessions uss WHERE uss.squad_id = game_events.squad_id AND uss.user_id = auth.uid() AND uss.is_active = true))`
  - INSERT: role `authenticated`; with_check: requester is active member of the same squad:
    `(EXISTS (SELECT 1 FROM user_squad_sessions uss WHERE uss.squad_id = squad_id AND uss.user_id = auth.uid() AND uss.is_active = true))`
- `game_rules`
  - SELECT: role `public`; qual: requester is active in the same squad:
    `(EXISTS (SELECT 1 FROM user_squad_sessions uss WHERE uss.squad_id = game_rules.squad_id AND uss.user_id = auth.uid() AND uss.is_active = true))`
  - INSERT/UPDATE/DELETE: role `authenticated`; qual + with_check: requester is active host in the same squad:
    `((SELECT auth.uid()) IN (SELECT uss1.user_id FROM user_squad_sessions uss1 WHERE uss1.squad_id = game_rules.squad_id AND uss1.is_active = true AND uss1.is_host = true))`
- `roles`
  - SELECT: role `public`; qual: `true`.
- `scoreboard_current` (VIEW)
  - View executes with security invoker to respect underlying table RLS:
    `ALTER VIEW scoreboard_current SET (security_invoker = on);`
- `scoreboard_final` (VIEW)
  - View executes with security invoker to respect underlying table RLS:
    `ALTER VIEW scoreboard_final SET (security_invoker = on);`
- `squad_games`
  - SELECT: role `public`; qual: EXISTS user session in same squad and active:
    `(EXISTS (SELECT 1 FROM user_squad_sessions uss WHERE uss.squad_id = squad_games.squad_id AND uss.user_id = auth.uid() AND uss.is_active = true))`
- `squads`
  - INSERT: role `authenticated`; with_check: `true`.
  - SELECT: role `public`; qual: `true`.
  - UPDATE: role `authenticated`; qual + with_check: requester is host of the squad:
    `(EXISTS (SELECT 1 FROM user_squad_sessions WHERE user_squad_sessions.user_id = auth.uid() AND user_squad_sessions.is_host = true AND user_squad_sessions.squad_id = squads.id))`
- `user_game_stats`
  - SELECT: role `public`; qual: requester is active in the related squad game:
    `(EXISTS (SELECT 1 FROM (squad_games sg JOIN user_squad_sessions uss ON uss.squad_id = sg.squad_id) WHERE sg.id = user_game_stats.game_id AND uss.user_id = auth.uid() AND uss.is_active = true))`
- `user_squad_locations`
  - DELETE: role `public`; qual: `auth.uid() = user_id`.
  - INSERT: role `authenticated`; with_check: `true`.
  - SELECT: role `public`; qual: `true`.
  - UPDATE: role `authenticated`; qual + with_check: `auth.uid() = user_id`.
- `user_squad_sessions`
  - INSERT: role `authenticated`; with_check: `true`.
  - SELECT: role `public`; qual: `true`.
  - UPDATE: role `authenticated`; qual: `auth.uid() = user_id`.
  - UPDATE (host scope): role `authenticated`; qual + with_check: requester is active host in same squad:
    `((SELECT auth.uid()) IN (SELECT uss1.user_id FROM user_squad_sessions uss1 WHERE uss1.squad_id = user_squad_sessions.squad_id AND uss1.is_active = true AND uss1.is_host = true))`
- `users`
  - SELECT: role `public`; qual: `true` (two identical policies present).
  - INSERT: role `public`; with_check: `auth.uid() = id` (two identical policies present).
  - UPDATE: role `public`; qual: `auth.uid() = id` (two identical policies present).

### Mobile App Screens (Flutter)
- Login (via magic link): Supabase + Resend.
- User: change name, color, role; disconnect.
- Squads: join/create squads; view members; see if a game is ongoing; invite users; leave squad; host-only: start game, kick user, reassign host.
- Squad Lobby:
  - Game controls: start/end game (host only), game timer display.
  - Squad members list with host controls.
  - Past games button: navigates to dedicated past games screen.
- Past Games Screen:
  - List of ended games with date, duration, game ID.
  - "View report" button opens final report overlay for each game.
  - Pull-to-refresh functionality.
- Map (Mapbox):
  - Shows members' locations with markers based on status (alive, dead, need medic/help).
  - Controls: center/follow user position.
  - Battle log: events (kills, deaths, status changes, joins/leaves).
  - Game timer when ongoing.
  - Auto-triggers final report overlay when game ends.
  - FABs → bottom sheets:
    - Members: list with score, status, distance, bearing; sorting by kills, K/D, distance.
    - Actions: toggle statuses (Died, Send help, Send medic). Untoggling returns to Alive. Increment kills. (Future: objective contributions.)
    - Location: currently disable geolocation.
- Final Report Overlay:
  - Full-screen modal triggered automatically on game end or manually from past games.
  - Two tabs: Leaderboard and History.
  - Leaderboard: sortable by kills, K/D ratio, kill streak; shows rank, username, stats, streak badge.
  - History: chronological list of game events with icons and timestamps.
  - Back to Lobby and Share buttons.
- Tracker: scan BLE devices; connect to user's TTGO; persist device ID for auto-reconnect.
- Help Notifications: real-time alerts when squad members need help/medic during active games.
  - In-app banner (foreground) and system notifications (background) with requester details.
  - TTGO device overlay with countdown and action buttons.
  - Auto-dismiss after configurable timeout or when requester changes status.
  - User configurable settings: enable/disable, sound, timeout, distance threshold, display options.

### Mapping/Keys
- Map provider: Mapbox.
- Android token: stored in `android/gradle.properties`; read at runtime (no `--dart-define`).
- iOS token: stored in Xcode config (e.g., `Runner.xcconfig`); read at runtime (no `--dart-define`).

### Internationalization (i18n)
- Uses Flutter `gen_l10n` with ARB files in `lib/l10n/`.
  - Template: `app_en.arb` (English) — source of truth for keys.
  - French: `app_fr.arb`.
  - Generator config: `l10n.yaml` → outputs to `lib/l10n/gen/app_localizations.dart` with `synthetic-package: false`.
- App wiring (see `lib/main.dart`):
  - `localizationsDelegates` and `supportedLocales` from `AppLocalizations`.
  - `onGenerateTitle` uses `AppLocalizations.of(context)?.appTitle`.
  - `localeResolutionCallback` falls back to `Locale('en')` when unsupported.
- Locale selection (see `lib/providers/locale_provider.dart`):
  - Persists user choice in `SharedPreferences` under key `app_locale_code`.
  - Allowed saved codes: `en`, `fr`. App starts with system locale if none saved.
  - `isInitialized` gates the first frame until the saved locale is loaded.
- Relative time strings: `timeago` locales registered for `en`, `en_short`, `fr`, `fr_short` in `main.dart`.
- Using strings in code:
  - No imports from a synthetic package; import generated file directly: `package:squad_tracker_flutter/l10n/gen/app_localizations.dart`.
  - Access via `AppLocalizations.of(context)!` (e.g., `AppLocalizations.of(context)!.loginTitle`).
  - Placeholders: define in ARB with `@key.placeholders` and call like `AppLocalizations.of(context)!.confirmKickUserBody(username)`.
- Adding a new string:
  1) Add the key/value to `lib/l10n/app_en.arb` (and placeholder metadata if needed).
  2) Add the same key to `lib/l10n/app_fr.arb`.
  3) Regenerate: run `flutter gen-l10n` (or build/run; generation happens automatically).
  4) Use it via `AppLocalizations` in widgets.
- Adding a new locale:
  1) Create `lib/l10n/app_<lang>.arb` mirroring keys from the template.
  2) If relative times are shown, register `timeago` messages for the new locale in `main.dart`.
  3) Update `LocaleProvider` to accept the new language code in `_loadSavedLocale` (currently checks `en`/`fr`).
  4) Rebuild to regenerate `supportedLocales`.
- Conventions/notes:
  - Keep keys camelCase; values can include punctuation and placeholders `{name}`.
  - The generator warns on missing keys or mismatched placeholders across locales.

### Gameplay Concepts
- Create squads; members set username, color, role.
- Configure game rules per squad/game.
- Start/stop games; create new ones.
- Track per-user/per-game stats: kills, deaths, status, kill streaks; show per-game scorecards.
- End-of-game experience: automatic final report overlay with leaderboard and battle history.
- Historical game browsing: access past game results and reports from squad lobby.

### Roadmap / Future
- TTGO UI:
  - Compass-style view indicating direction to each member.
- App gameplay/config:
  - Define flexible game modes for multiple scenarios.
  - Map editing for objectives and markers (spawn points, objectives, misc markers).
  - Pagination for game history when events >500.
  - Share functionality for final reports.
- Help Notification Enhancements:
  - Notify requester when someone accepts their help/medic request.
  - Show all squad members who accepted help requests and their distance to requester.
  - Prevent duplicate responses by showing "X people are already helping" status.
  - Allow requester to see who's coming to help and their ETA based on distance.
- Connectivity (later):
  - Explore switching/bridging between cellular data and LoRa for communications.

### Assumptions / To Clarify
- None currently.

### Maintenance
- **Keep this file updated** when project elements change:
  - Database schema changes (new tables, columns, constraints, triggers, views)
  - BLE protocol modifications (new message types, UUID changes)
  - App screen/feature additions or removals
  - New game modes or configuration parameters
  - TTGO firmware behavior changes
  - Mapbox token handling updates
  - Roadmap items completed or new ones added
- Update the "Assumptions / To Clarify" section as items are resolved.
- When providing new schema/RLS/enum details, update the relevant sections immediately.

### Recent Updates
- **Help Notification System (2025-09-21)**:
  - Added `help_requests` table with auto-creation via database triggers on HELP/MEDIC status changes.
  - Implemented real-time help notifications with in-app banners and system notifications.
  - Extended BLE protocol with `HELP_REQ`, `HELP_RESP`, and `HELP_CANCEL` messages.
  - Added TTGO device overlay for help alerts with countdown and action buttons.
  - Created notification settings screen with configurable preferences.
  - Added auto-dismiss logic and distance-based filtering.
  - Integrated with existing location services for distance/direction calculation.
- **Final Report Overlay Feature (2025-09-20)**:
  - Added `game_events` table for battle log tracking with auto-logging triggers.
  - Added kill streak tracking (`max_kill_streak`, `current_kill_streak`) to `user_game_stats`.
  - Added `scoreboard_final` view for ended game scoreboards.
  - Implemented automatic end-of-game detection and overlay trigger.
  - Added dedicated Past Games screen accessible from squad lobby.
  - Added Final Report Overlay with Leaderboard and History tabs.
  - Added i18n support for new UI elements (EN/FR).
  - Updated GameService with final report queries and game end detection streams.